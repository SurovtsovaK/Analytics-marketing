import pandas as pd
import streamlit as st
import plotly.graph_objects as go
from plotly.subplots import make_subplots

def main():
    # –ß—Ç–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –ª–∏–¥–∞–º–∏
        leads_df = pd.read_csv('leads2025.csv')
        st.success(f"‚úÖ –§–∞–π–ª leads2025.csv —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –†–∞–∑–º–µ—Ä: {leads_df.shape[0]} —Å—Ç—Ä–æ–∫, {leads_df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
        
    except FileNotFoundError:
        st.error("‚ùå –§–∞–π–ª leads2025.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        leads_df = None
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ leads2025.csv: {str(e)}")
        leads_df = None

    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–∫—É–ø–∫–∞–º–∏
        purchases_df = pd.read_csv('purchases2025.csv')
        st.success(f"‚úÖ –§–∞–π–ª purchases2025.csv —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –†–∞–∑–º–µ—Ä: {purchases_df.shape[0]} —Å—Ç—Ä–æ–∫, {purchases_df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
        
    except FileNotFoundError:
        st.error("‚ùå –§–∞–π–ª purchases2025.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        purchases_df = None
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ purchases2025.csv: {str(e)}")
        purchases_df = None

    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏
        ymetrica_df = pd.read_csv('YMetrica.csv')
        st.success(f"‚úÖ –§–∞–π–ª YMetrica.csv —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –†–∞–∑–º–µ—Ä: {ymetrica_df.shape[0]} —Å—Ç—Ä–æ–∫, {ymetrica_df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
        
    except FileNotFoundError:
        st.error("‚ùå –§–∞–π–ª YMetrica.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        ymetrica_df = None
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ YMetrica.csv: {str(e)}")
        ymetrica_df = None

    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –∞–∫—Ç–∏–≤–∞—Ü–∏—è–º–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
        activations_df = pd.read_csv('–ê–∫—Ç–∏–≤–∞—Ü–∏–∏ 1.01-1.04.csv', sep=None, engine='python', encoding='utf-8')
        st.success(f"‚úÖ –§–∞–π–ª –ê–∫—Ç–∏–≤–∞—Ü–∏–∏ 1.01-1.04.csv —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –†–∞–∑–º–µ—Ä: {activations_df.shape[0]} —Å—Ç—Ä–æ–∫, {activations_df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
        
    except FileNotFoundError:
        st.error("‚ùå –§–∞–π–ª –ê–∫—Ç–∏–≤–∞—Ü–∏–∏ 1.01-1.04.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        activations_df = None
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ê–∫—Ç–∏–≤–∞—Ü–∏–∏ 1.01-1.04.csv: {str(e)}")
        # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —á—Ç–µ–Ω–∏—è
        try:
            st.info("üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞...")
            # –ü—Ä–æ–±—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
            for sep in [',', ';', '\t', '|']:
                try:
                    activations_df = pd.read_csv('–ê–∫—Ç–∏–≤–∞—Ü–∏–∏ 1.01-1.04.csv', sep=sep, encoding='utf-8')
                    st.success(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º '{sep}'! –†–∞–∑–º–µ—Ä: {activations_df.shape[0]} —Å—Ç—Ä–æ–∫, {activations_df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
                    break
                except:
                    continue
            
            if activations_df is None:
                # –ü—Ä–æ–±—É–µ–º —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏
                try:
                    activations_df = pd.read_csv('–ê–∫—Ç–∏–≤–∞—Ü–∏–∏ 1.01-1.04.csv', sep=None, engine='python', encoding='latin-1')
                    st.success(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π latin-1! –†–∞–∑–º–µ—Ä: {activations_df.shape[0]} —Å—Ç—Ä–æ–∫, {activations_df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
                except:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤")
                    activations_df = None
                    
        except Exception as e2:
            st.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–µ —É–¥–∞–ª–∏—Å—å: {str(e2)}")
            activations_df = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
    if leads_df is not None and purchases_df is not None and ymetrica_df is not None:
        st.success("üéâ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö
        st.subheader("üìä –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö:")
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
        if activations_df is not None:
            st.info("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:")
            st.write(f"**–ö–æ–ª–æ–Ω–∫–∏:** {list(activations_df.columns)}")
            st.write(f"**–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:** {activations_df.dtypes.to_dict()}")
            st.write("**–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫:**")
            st.dataframe(activations_df.head(), use_container_width=True)
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ "ID –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
            st.info("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç–æ–ª–±—Ü–∞ 'ID –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞':")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞
            device_id_found = False
            for col in activations_df.columns:
                if 'ID' in col and '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' in col:
                    st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü: '{col}' (—Å–æ–¥–µ—Ä–∂–∏—Ç 'ID' –∏ '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')")
                    device_id_found = True
                    device_id_count = activations_df[col].notna().sum()
                    device_id_unique = activations_df[col].nunique()
                    st.info(f"üìä –í —Å—Ç–æ–ª–±—Ü–µ '{col}': {device_id_count} –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, {device_id_unique} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
                    break
            
            if not device_id_found:
                st.warning("‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü 'ID –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–π")
                st.info("üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã:")
                for i, col in enumerate(activations_df.columns, 1):
                    st.write(f"   {i}. '{col}' (–¥–ª–∏–Ω–∞: {len(col)})")
                    
                # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Å—Ç–æ–ª–±—Ü—ã
                similar_columns = []
                for col in activations_df.columns:
                    if 'id' in col.lower() or '—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' in col.lower():
                        similar_columns.append(col)
                
                if similar_columns:
                    st.info(f"üîç –ü–æ—Ö–æ–∂–∏–µ —Å—Ç–æ–ª–±—Ü—ã: {similar_columns}")
        else:
            st.warning("‚ö†Ô∏è –§–∞–π–ª –∞–∫—Ç–∏–≤–∞—Ü–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–õ–∏–¥—ã", f"{leads_df.shape[0]:,}")
            st.metric("–°—Ç–æ–ª–±—Ü—ã –ª–∏–¥–æ–≤", leads_df.shape[1])
            
        with col2:
            st.metric("–ü–æ–∫—É–ø–∫–∏", f"{purchases_df.shape[0]:,}")
            st.metric("–°—Ç–æ–ª–±—Ü—ã –ø–æ–∫—É–ø–æ–∫", purchases_df.shape[1])
            
        with col3:
            st.metric("–°–æ–±—ã—Ç–∏—è YM", f"{ymetrica_df.shape[0]:,}")
            st.metric("–°—Ç–æ–ª–±—Ü—ã YM", ymetrica_df.shape[1])
            
        with col4:
            if activations_df is not None:
                st.metric("–ê–∫—Ç–∏–≤–∞—Ü–∏–∏", f"{activations_df.shape[0]:,}")
                st.metric("–°—Ç–æ–ª–±—Ü—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–π", activations_df.shape[1])
            else:
                st.metric("–ê–∫—Ç–∏–≤–∞—Ü–∏–∏", "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
                st.metric("–°—Ç–æ–ª–±—Ü—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–π", "N/A")
        
        # –¢–ê–ë–õ–ò–¶–ê 1: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ª–∏–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º (—Ç–æ–ª—å–∫–æ –∏–∑ leads2025)
        st.subheader("üìä –¢–ê–ë–õ–ò–¶–ê 1: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ª–∏–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –ª–∏–¥–æ–≤ –∏–∑ leads2025
            st.info("üìã –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –ª–∏–¥–æ–≤ –∏–∑ leads2025...")
            
            # –ë–µ—Ä–µ–º –≤—Å–µ –ª–∏–¥—ã –∏–∑ leads2025
            leads_analysis = leads_df.copy()
            
            # –®–∞–≥ 1: –ù–∞—Ö–æ–¥–∏–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å YMetrica –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
            st.info("üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –ª–∏–¥–æ–≤...")
            try:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–æ–ª–±—Ü–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                leads_analysis['–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞'] = '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                if 'ClientID' not in ymetrica_df.columns:
                    st.warning("‚ö†Ô∏è –í YMetrica –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü 'ClientID'. –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'.")
                elif 'firstTrafficSource' not in ymetrica_df.columns:
                    st.warning("‚ö†Ô∏è –í YMetrica –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü 'firstTrafficSource'. –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'.")
                else:
                    # –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤: –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, —É–±–∏—Ä–∞–µ–º .0 –∏ –Ω–µ–∞–ª—Ñ–∞–Ω—É–º —Å–∏–º–≤–æ–ª—ã
                    def _normalize(series):
                        return (
                            series.astype(str)
                            .str.strip()
                            .str.replace(r'\\.0$', '', regex=True)
                            .str.replace(r'[^0-9A-Za-z]+', '', regex=True)
                            .str.lower()
                        )
                    
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤ YMetrica
                    ym_map_df = pd.DataFrame({
                        'ClientID_norm': _normalize(ymetrica_df['ClientID']),
                        'firstTrafficSource': ymetrica_df['firstTrafficSource']
                    })
                    ym_map_df = ym_map_df.dropna(subset=['ClientID_norm'])
                    ym_map_df = ym_map_df[ym_map_df['ClientID_norm'].str.len() > 0]
                    ym_map_df = ym_map_df.drop_duplicates(subset=['ClientID_norm'], keep='first')
                    ym_mapping = dict(zip(ym_map_df['ClientID_norm'], ym_map_df['firstTrafficSource']))
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º–µ–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ leads (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∏–º–µ–Ω)
                    yclid_col = 'Yclid' if 'Yclid' in leads_analysis.columns else ('yclid' if 'yclid' in leads_analysis.columns else None)
                    ymuid_col = '_ym_uid' if '_ym_uid' in leads_analysis.columns else ('ym_uid' if 'ym_uid' in leads_analysis.columns else None)
                    
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤ leads
                    leads_analysis['Yclid_norm'] = _normalize(leads_analysis[yclid_col]) if yclid_col else ''
                    leads_analysis['_ym_uid_norm'] = _normalize(leads_analysis[ymuid_col]) if ymuid_col else ''
                    
                    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
                    ym_clientids = ym_map_df['ClientID_norm']
                    yclid_nonempty_unique = leads_analysis.loc[leads_analysis['Yclid_norm'] != '', 'Yclid_norm'].nunique()
                    ymuid_nonempty_unique = leads_analysis.loc[leads_analysis['_ym_uid_norm'] != '', '_ym_uid_norm'].nunique()
                    ym_unique = ym_clientids.nunique()
                    overlap_yclid = leads_analysis['Yclid_norm'].isin(ym_clientids.values).sum()
                    overlap_ymuid = leads_analysis['_ym_uid_norm'].isin(ym_clientids.values).sum()
                    st.info(f"Yclid —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö (–Ω–µ –ø—É—Å—Ç—ã—Ö): {yclid_nonempty_unique}, _ym_uid —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö (–Ω–µ –ø—É—Å—Ç—ã—Ö): {ymuid_nonempty_unique}, YM ClientID —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {ym_unique}, –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π Yclid‚ÜîClientID: {overlap_yclid}, –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π _ym_uid‚ÜîClientID: {overlap_ymuid}")
                    
                    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏: —Å–Ω–∞—á–∞–ª–∞ –ø–æ Yclid, –∑–∞—Ç–µ–º –ø–æ _ym_uid
                    yclid_sources = leads_analysis['Yclid_norm'].map(ym_mapping)
                    ymuid_sources = leads_analysis['_ym_uid_norm'].map(ym_mapping)
                    final_sources = yclid_sources.fillna(ymuid_sources)
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–æ–≤
                    leads_analysis.loc[final_sources.notna(), '–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞'] = final_sources[final_sources.notna()]
                    
                    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    matched_by_yclid = int((yclid_sources.notna()).sum())
                    matched_by_ym_uid = int(((yclid_sources.isna()) & (ymuid_sources.notna())).sum())
                    unmatched = int((leads_analysis['–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞'] == '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω').sum())
                    
                    st.success(f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã: –ø–æ Yclid - {matched_by_yclid}, –ø–æ _ym_uid - {matched_by_ym_uid}, –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ - {unmatched}")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
            if '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è' in leads_analysis.columns:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ datetime –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Å—è—Ü
                leads_analysis['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'] = pd.to_datetime(leads_analysis['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'], errors='coerce')
                leads_analysis['–ú–µ—Å—è—Ü'] = leads_analysis['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.to_period('M')
                
                # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –¥–∞—Ç—ã
                leads_analysis_clean = leads_analysis[leads_analysis['–ú–µ—Å—è—Ü'].notna()].copy()
                
                if len(leads_analysis_clean) > 0:
                    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ –º–µ—Å—è—Ü–∞–º –ò –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Ç—Ä–∞—Ñ–∏–∫–∞
                    if '–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏' in leads_analysis_clean.columns:
                        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü—É –∏ –∏—Å—Ç–æ—á–Ω–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞
                        analytics_df = leads_analysis_clean.groupby(['–ú–µ—Å—è—Ü', '–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞']).agg({
                            'ID': 'count',  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
                        }).rename(columns={
                            'ID': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'
                        }).reset_index()
                        
                        # ===== –£–°–õ–û–ñ–ù–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –°–¢–û–õ–ë–¶–ê "–ù–û–í–´–ï –ê–ö–¢–ò–í–ê–¶–ò–ò –¢–°–î" =====
                        st.info("üîç –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü '–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î' —Å —É—Å–ª–æ–∂–Ω–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π...")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ñ–∞–π–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
                        if activations_df is not None:
                            required_columns = ['–°—á–µ—Ç', '–ü–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è']
                            missing_columns = [col for col in required_columns if col not in activations_df.columns]
                            if missing_columns:
                                st.warning(f"‚ö†Ô∏è –í —Ñ–∞–π–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã: {', '.join(missing_columns)}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ª–±—Ü–∞ "ID –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞" –¥–ª—è —É—á–µ—Ç–∞ –¥—É–±–ª–µ–π
                            device_id_column = None
                            for col in activations_df.columns:
                                if 'ID' in col and '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' in col:
                                    device_id_column = col
                                    break
                            
                            if device_id_column:
                                st.info(f"‚úÖ –°—Ç–æ–ª–±–µ—Ü '{device_id_column}' –Ω–∞–π–¥–µ–Ω - –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –¥—É–±–ª–µ–π")
                            else:
                                st.warning("‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü 'ID –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –¥—É–±–ª–∏ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç")
                        else:
                            st.warning("‚ö†Ô∏è –§–∞–π–ª –∞–∫—Ç–∏–≤–∞—Ü–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
                        
                        # 1. –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü "–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î" –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω—É–ª—è–º–∏
                        analytics_df['–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î'] = 0
                        
                        # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ purchases2025 - —Å—Ç–æ–ª–±–µ—Ü "–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ 1–°"
                        if '–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ 1–°' in purchases_df.columns:
                            purchase_accounts = purchases_df['–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ 1–°'].dropna().astype(str).unique()
                            st.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(purchase_accounts)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ —Å—á–µ—Ç–æ–≤ 1–° –≤ purchases2025")
                        else:
                            st.warning("‚ö†Ô∏è –í purchases2025 –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü '–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ 1–°'")
                            purchase_accounts = []
                        
                        # 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ "–ê–∫—Ç–∏–≤–∞—Ü–∏–∏ 1.01-1.04" - —Å—Ç–æ–ª–±–µ—Ü "–°—á–µ—Ç" —Å —É—á–µ—Ç–æ–º "–ü–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è"
                        if activations_df is not None and '–°—á–µ—Ç' in activations_df.columns:
                            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ "–ü–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è" –Ω–µ –ø—É—Å—Ç–∞—è
                            if '–ü–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è' in activations_df.columns:
                                # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ "–ü–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è"
                                first_activation_mask = activations_df['–ü–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è'].notna() & (activations_df['–ü–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è'] != '')
                                
                                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
                                filtered_activations = activations_df[first_activation_mask]
                                st.info(f"üìä –ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä '–ü–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è' –Ω–µ –ø—É—Å—Ç–∞—è: {len(filtered_activations)} –∏–∑ {len(activations_df)} —Å—Ç—Ä–æ–∫")
                                
                                # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å—á–µ—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –¥—É–±–ª–µ–π –ø–æ "ID –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
                                device_id_column = None
                                for col in activations_df.columns:
                                    if 'ID' in col and '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' in col:
                                        device_id_column = col
                                        break
                                
                                if device_id_column:
                                    # –ö–∞–∂–¥–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è "—Å—á–µ—Ç + ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞" —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è
                                    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å—á–µ—Ç–æ–≤ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                                    unique_combinations = filtered_activations[['–°—á–µ—Ç', device_id_column]].drop_duplicates()
                                    activation_accounts = unique_combinations['–°—á–µ—Ç'].dropna().astype(str).unique()
                                    st.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(activation_accounts)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ —Å—á–µ—Ç–æ–≤")
                                    st.info(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π '—Å—á–µ—Ç + —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ': {len(unique_combinations)}")
                                else:
                                    # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ "ID –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç–∞
                                    activation_accounts = filtered_activations['–°—á–µ—Ç'].dropna().astype(str).unique()
                                    st.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(activation_accounts)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ —Å—á–µ—Ç–æ–≤ (—Å—Ç–æ–ª–±–µ—Ü 'ID –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
                            else:
                                st.warning("‚ö†Ô∏è –í —Ñ–∞–π–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü '–ü–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è'")
                                activation_accounts = []
                        else:
                            st.warning("‚ö†Ô∏è –§–∞–π–ª –∞–∫—Ç–∏–≤–∞—Ü–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü '–°—á–µ—Ç'")
                            activation_accounts = []
                        
                        # 4. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—Ö–æ–¥–∏–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                        if len(purchase_accounts) > 0 and len(activation_accounts) > 0:
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                            purchase_set = set(purchase_accounts)
                            activation_set = set(activation_accounts)
                            
                            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                            matching_accounts = purchase_set.intersection(activation_set)
                            st.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(matching_accounts)} —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ —Å—á–µ—Ç–æ–≤")
                            
                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                            st.info(f"üìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:")
                            st.info(f"   ‚Ä¢ –ù–æ–º–µ—Ä–æ–≤ —Å—á–µ—Ç–æ–≤ –≤ purchases2025: {len(purchase_set)}")
                            st.info(f"   ‚Ä¢ –ù–æ–º–µ—Ä–æ–≤ —Å—á–µ—Ç–æ–≤ –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏—è—Ö (—Å —Ñ–∏–ª—å—Ç—Ä–æ–º): {len(activation_set)}")
                            st.info(f"   ‚Ä¢ –°–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –Ω–æ–º–µ—Ä–æ–≤: {len(matching_accounts)}")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Å—á–µ—Ç–æ–≤
                            if len(matching_accounts) > 0:
                                sample_accounts = list(matching_accounts)[:5]  # –ü–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                                st.info(f"   ‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Å—á–µ—Ç–æ–≤: {', '.join(sample_accounts)}")
                            
                            if len(matching_accounts) > 0:
                                # 5. –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç–æ–ª–±–µ—Ü "–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î" –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –º–µ—Å—è—Ü–∞–º
                                st.info("üìù –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç–æ–ª–±–µ—Ü '–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î'...")
                                
                                # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø–æ –º–µ—Å—è—Ü–∞–º –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
                                activations_by_month_source = {}
                                
                                # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ª–∏–¥–∞–º –∏ –∏—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                                for _, lead in leads_analysis_clean.iterrows():
                                    lead_month = lead['–ú–µ—Å—è—Ü']
                                    lead_source = lead['–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞']
                                    key = (lead_month, lead_source)
                                    
                                    if key not in activations_by_month_source:
                                        activations_by_month_source[key] = 0
                                    
                                    # –ò—â–µ–º –ø–æ–∫—É–ø–∫–∏ –ø–æ —ç—Ç–æ–º—É –ª–∏–¥—É
                                    found_activation = False
                                    
                                                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ClientID
                                    if pd.notna(lead['ClientID']) and lead['ClientID'] != '':
                                        lead_purchases = purchases_df[purchases_df['ClientID'] == lead['ClientID']]
                                        for _, purchase in lead_purchases.iterrows():
                                            if pd.notna(purchase['–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ 1–°']):
                                                purchase_account = str(purchase['–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ 1–°'])
                                                if purchase_account in matching_accounts:
                                                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–æ–ª–±–µ—Ü ID –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —Å—á–∏—Ç–∞–µ–º –∫–∞–∂–¥—É—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
                                                    if device_id_column:
                                                        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å—á–µ—Ç–∞
                                                        account_activations = filtered_activations[filtered_activations['–°—á–µ—Ç'] == purchase_account]
                                                        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å—á–µ—Ç–∞
                                                        unique_devices = account_activations[device_id_column].nunique()
                                                        activations_by_month_source[key] += unique_devices
                                                    else:
                                                        # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ ID –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ 1
                                                        activations_by_month_source[key] += 1
                                                    found_activation = True
                                                    break
                                    
                                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ ClientID, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ Yclid
                                    if not found_activation and pd.notna(lead['Yclid']) and lead['Yclid'] != '':
                                        lead_purchases = purchases_df[purchases_df['Yclid'] == lead['Yclid']]
                                        for _, purchase in lead_purchases.iterrows():
                                            if pd.notna(purchase['–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ 1–°']):
                                                purchase_account = str(purchase['–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ 1–°'])
                                                if purchase_account in matching_accounts:
                                                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–æ–ª–±–µ—Ü ID –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —Å—á–∏—Ç–∞–µ–º –∫–∞–∂–¥—É—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
                                                    if device_id_column:
                                                        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å—á–µ—Ç–∞
                                                        account_activations = filtered_activations[filtered_activations['–°—á–µ—Ç'] == purchase_account]
                                                        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å—á–µ—Ç–∞
                                                        unique_devices = account_activations[device_id_column].nunique()
                                                        activations_by_month_source[key] += unique_devices
                                                    else:
                                                        # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ ID –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ 1
                                                        activations_by_month_source[key] += 1
                                                    found_activation = True
                                                    break
                                    
                                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ Yclid, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ _ym_uid
                                    if not found_activation and pd.notna(lead['_ym_uid']) and lead['_ym_uid'] != '':
                                        lead_purchases = purchases_df[purchases_df['_ym_uid'] == lead['Yclid']]
                                        for _, purchase in lead_purchases.iterrows():
                                            if pd.notna(purchase['–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ 1–°']):
                                                purchase_account = str(purchase['–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ 1–°'])
                                                if purchase_account in matching_accounts:
                                                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–æ–ª–±–µ—Ü ID –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —Å—á–∏—Ç–∞–µ–º –∫–∞–∂–¥—É—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
                                                    if device_id_column:
                                                        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å—á–µ—Ç–∞
                                                        account_activations = filtered_activations[filtered_activations['–°—á–µ—Ç'] == purchase_account]
                                                        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å—á–µ—Ç–∞
                                                        unique_devices = account_activations[device_id_column].nunique()
                                                        activations_by_month_source[key] += unique_devices
                                                    else:
                                                        # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ ID –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ 1
                                                        activations_by_month_source[key] += 1
                                                    found_activation = True
                                                    break
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü "–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î" –≤ analytics_df
                                for (month, source), count in activations_by_month_source.items():
                                    mask = (analytics_df['–ú–µ—Å—è—Ü'] == month) & (analytics_df['–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞'] == source)
                                    analytics_df.loc[mask, '–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î'] = count
                                
                                total_new_activations = sum(activations_by_month_source.values())
                                st.success(f"‚úÖ –°—Ç–æ–ª–±–µ—Ü '–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î' –∑–∞–ø–æ–ª–Ω–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {total_new_activations} –Ω–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π")
                            else:
                                st.info("‚ÑπÔ∏è –°–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ —Å—á–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                                total_new_activations = 0
                        else:
                            st.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¢–°–î")
                            total_new_activations = 0
                        
                        # ===== –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò =====
                    
                        # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤
                        prequalified_mask = leads_analysis_clean['–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏'] == '–õ–∏–¥ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'
                        
                        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
                        prequalified_by_month_source = leads_analysis_clean[prequalified_mask].groupby(['–ú–µ—Å—è—Ü', '–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞'])['ID'].count().reset_index()
                        prequalified_by_month_source = prequalified_by_month_source.rename(columns={'ID': '–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'})
                        
                        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ª–∏–¥–∞–º–∏
                        analytics_df = analytics_df.merge(
                            prequalified_by_month_source,
                            on=['–ú–µ—Å—è—Ü', '–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞'],
                            how='left'
                        )
                        
                        # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è –Ω—É–ª—è–º–∏
                        analytics_df['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'] = analytics_df['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].fillna(0).astype(int)
                        
                        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å—Ç–æ–ª–±–µ—Ü "–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        if '–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î' not in analytics_df.columns:
                            analytics_df['–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î'] = 0
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é
                        analytics_df['–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é (%)'] = (
                            (analytics_df['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'] / analytics_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'] * 100)
                            .round(2)
                        )
                        
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
                        analytics_df = analytics_df.sort_values(['–ú–µ—Å—è—Ü', '–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞'])
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü "–ö—É–ø–∏–ª–∏" - –∫—Ç–æ –∏–∑ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤ –≤ –∏—Ç–æ–≥–µ –∫—É–ø–∏–ª
                        st.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏ —Å—Ä–µ–¥–∏ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤...")
                        
                        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ª–∏–¥–∞–º–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
                        prequalified_leads = leads_analysis_clean[leads_analysis_clean['–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏'] == '–õ–∏–¥ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'].copy()
                        
                        if len(prequalified_leads) > 0:
                            st.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(prequalified_leads)} –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫—É–ø–æ–∫")
                            
                            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Ç—Ä–∞—Ñ–∏–∫–∞
                            purchased_results = []
                            
                            # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ —É—á—Ç–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                            processed_contacts = set()
                            
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
                            for (month, source) in prequalified_leads[['–ú–µ—Å—è—Ü', '–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞']].drop_duplicates().values:
                                month_source_leads = prequalified_leads[
                                    (prequalified_leads['–ú–µ—Å—è—Ü'] == month) & 
                                    (prequalified_leads['–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞'] == source)
                                ]
                                purchased_count = 0
                                
                                # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏–¥–∞ –≤ –º–µ—Å—è—Ü–µ –∏—â–µ–º –ø–æ–∫—É–ø–∫–∏
                                for _, lead in month_source_leads.iterrows():
                                    found_purchase = False
                                    
                                    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                                    contact_key = None
                                    
                                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ClientID > Yclid > _ym_uid > –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç)
                                    if pd.notna(lead['ClientID']) and lead['ClientID'] != '':
                                        contact_key = f"ClientID_{lead['ClientID']}"
                                    elif pd.notna(lead['Yclid']) and lead['Yclid'] != '':
                                        contact_key = f"Yclid_{lead['Yclid']}"
                                    elif pd.notna(lead['_ym_uid']) and lead['_ym_uid'] != '':
                                        contact_key = f"_ym_uid_{lead['_ym_uid']}"
                                    elif pd.notna(lead['–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç']) and lead['–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç'] != '':
                                        contact_key = f"Contact_{lead['–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç']}"
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç
                                    if contact_key is None or contact_key in processed_contacts:
                                        continue
                                    
                                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞
                                    lead_date = lead['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è']
                                    
                                    # 1. –ò—â–µ–º –ø–æ ClientID
                                    if pd.notna(lead['ClientID']) and lead['ClientID'] != '':
                                        # –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ"
                                        successful_purchases = purchases_df[
                                            (purchases_df['ClientID'] == lead['ClientID']) & 
                                            (purchases_df['–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏'] == '–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ')
                                        ]
                                        
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ —Å –¥–∞—Ç–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ—Å–ª–µ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞
                                        for _, purchase in successful_purchases.iterrows():
                                            if pd.notna(purchase['–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è']):
                                                purchase_date = pd.to_datetime(purchase['–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è'], errors='coerce')
                                                if pd.notna(purchase_date) and purchase_date > lead_date:
                                                    purchased_count += 1
                                                    found_purchase = True
                                                    processed_contacts.add(contact_key)  # –û—Ç–º–µ—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                                                    break  # –ù–∞—à–ª–∏ –ø–æ–∫—É–ø–∫—É, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
                                    
                                    # 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ ClientID, –∏—â–µ–º –ø–æ Yclid
                                    if not found_purchase and pd.notna(lead['Yclid']) and lead['Yclid'] != '':
                                        successful_purchases = purchases_df[
                                            (purchases_df['Yclid'] == lead['Yclid']) & 
                                            (purchases_df['–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏'] == '–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ')
                                        ]
                                        
                                        for _, purchase in successful_purchases.iterrows():
                                            if pd.notna(purchase['–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è']):
                                                purchase_date = pd.to_datetime(purchase['–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è'], errors='coerce')
                                                if pd.notna(purchase_date) and purchase_date > lead_date:
                                                    purchased_count += 1
                                                    found_purchase = True
                                                    processed_contacts.add(contact_key)  # –û—Ç–º–µ—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                                                    break
                                    
                                    # 3. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ Yclid, –∏—â–µ–º –ø–æ _ym_uid
                                    if not found_purchase and pd.notna(lead['_ym_uid']) and lead['_ym_uid'] != '':
                                        successful_purchases = purchases_df[
                                            (purchases_df['_ym_uid'] == lead['_ym_uid']) & 
                                            (purchases_df['–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏'] == '–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ')
                                        ]
                                        
                                        for _, purchase in successful_purchases.iterrows():
                                            if pd.notna(purchase['–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è']):
                                                purchase_date = pd.to_datetime(purchase['–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è'], errors='coerce')
                                                if pd.notna(purchase_date) and purchase_date > lead_date:
                                                    purchased_count += 1
                                                    found_purchase = True
                                                    processed_contacts.add(contact_key)  # –û—Ç–º–µ—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                                                    break
                                    
                                    # 4. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ _ym_uid, –∏—â–µ–º –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É
                                    if not found_purchase and pd.notna(lead['–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç']) and lead['–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç'] != '':
                                        successful_purchases = purchases_df[
                                            (purchases_df['–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç'] == lead['–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç']) & 
                                            (purchases_df['–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏'] == '–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ')
                                        ]
                                        
                                        for _, purchase in successful_purchases.iterrows():
                                            if pd.notna(purchase['–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è']):
                                                purchase_date = pd.to_datetime(purchase['–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è'], errors='coerce')
                                                if pd.notna(purchase_date) and purchase_date > lead_date:
                                                    purchased_count += 1
                                                    found_purchase = True
                                                    processed_contacts.add(contact_key)  # –û—Ç–º–µ—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                                                    break
                                
                                purchased_results.append({
                                    '–ú–µ—Å—è—Ü': month,
                                    '–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞': source,
                                    '–ö—É–ø–∏–ª–∏': purchased_count
                                })
                            
                            # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∫—É–ø–æ–∫
                            purchased_df = pd.DataFrame(purchased_results)
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü "–ö—É–ø–∏–ª–∏" –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É
                            analytics_df = analytics_df.merge(
                                purchased_df,
                                on=['–ú–µ—Å—è—Ü', '–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞'],
                                how='left'
                            )
                            analytics_df['–ö—É–ø–∏–ª–∏'] = analytics_df['–ö—É–ø–∏–ª–∏'].fillna(0).astype(int)
                            
                                                        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü "–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–∫—É–ø–∫—É (%)" - –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫—É–ø–∏–≤—à–∏—Ö –∫ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
                            analytics_df['–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–∫—É–ø–∫—É (%)'] = (
                                (analytics_df['–ö—É–ø–∏–ª–∏'] / analytics_df['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'] * 100)
                                .round(2)
                            ).fillna(0)
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü "–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)" - –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π –∫ –∫—É–ø–∏–≤—à–∏–º
                            analytics_df['–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)'] = (
                                (analytics_df['–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î'] / analytics_df['–ö—É–ø–∏–ª–∏'] * 100)
                                .round(2)
                            ).fillna(0)
                            
                            total_purchased = purchased_df['–ö—É–ø–∏–ª–∏'].sum()
                            st.success(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—É–ø–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {total_purchased} –ø–æ–∫—É–ø–æ–∫ —Å—Ä–µ–¥–∏ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤")
                            
                        else:
                            st.warning("‚ö†Ô∏è –ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç–æ–ª–±—Ü—ã
                            analytics_df['–ö—É–ø–∏–ª–∏'] = 0
                            analytics_df['–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–∫—É–ø–∫—É (%)'] = 0.0
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É "–ò—Ç–æ–≥–æ" –≤ –∫–æ–Ω–µ—Ü —Ç–∞–±–ª–∏—Ü—ã
                        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞
                        total_rows = []
                        

                        
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º —Å—Ç—Ä–æ–∫
                        ordered_rows = []
                        
                        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –º–µ—Å—è—Ü—É
                        for month in sorted(analytics_df['–ú–µ—Å—è—Ü'].unique()):
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞
                            month_data = analytics_df[analytics_df['–ú–µ—Å—è—Ü'] == month].sort_values('–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞')
                            for _, row in month_data.iterrows():
                                ordered_rows.append(row.to_dict())
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥ –ø–æ –º–µ—Å—è—Ü—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                            month_summary = {
                                '–ú–µ—Å—è—Ü': month,
                                '–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞': '–ò–¢–û–ì–û –ü–û –ú–ï–°–Ø–¶–£',
                                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤': month_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'].sum(),
                                '–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã': month_data['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum(),
                                '–ö—É–ø–∏–ª–∏': month_data['–ö—É–ø–∏–ª–∏'].sum(),
                                '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é (%)': round(
                                    (month_data['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum() / month_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'].sum() * 100), 2
                                ) if month_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'].sum() > 0 else 0,
                                '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–∫—É–ø–∫—É (%)': round(
                                    (month_data['–ö—É–ø–∏–ª–∏'].sum() / month_data['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum() * 100), 2
                                ) if month_data['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum() > 0 else 0,
                                '–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î': month_data['–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î'].sum() if '–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î' in month_data.columns else 0,
                                '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)': round(
                                    (month_data['–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î'].sum() / month_data['–ö—É–ø–∏–ª–∏'].sum() * 100), 2
                                ) if month_data['–ö—É–ø–∏–ª–∏'].sum() > 0 else 0
                            }
                            ordered_rows.append(month_summary)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞
                        for source in sorted(analytics_df['–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞'].unique()):
                            source_data = analytics_df[analytics_df['–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞'] == source]
                            source_summary = {
                                '–ú–µ—Å—è—Ü': '–ò—Ç–æ–≥–æ',
                                '–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞': source,
                                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤': source_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'].sum(),
                                '–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã': source_data['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum(),
                                '–ö—É–ø–∏–ª–∏': source_data['–ö—É–ø–∏–ª–∏'].sum(),
                                '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é (%)': round(
                                    (source_data['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum() / source_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'].sum() * 100), 2
                                ) if source_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'].sum() > 0 else 0,
                                '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–∫—É–ø–∫—É (%)': round(
                                    (source_data['–ö—É–ø–∏–ª–∏'].sum() / source_data['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum() * 100), 2
                                ) if source_data['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum() > 0 else 0,
                                '–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î': source_data['–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î'].sum() if '–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î' in source_data.columns else 0,
                                '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)': round(
                                    (source_data['–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î'].sum() / source_data['–ö—É–ø–∏–ª–∏'].sum() * 100), 2
                                ) if source_data['–ö—É–ø–∏–ª–∏'].sum() > 0 else 0
                            }
                            ordered_rows.append(source_summary)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                        overall_summary = {
                            '–ú–µ—Å—è—Ü': '–ò—Ç–æ–≥–æ',
                            '–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞': '–í–°–ï –ò–°–¢–û–ß–ù–ò–ö–ò',
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤': analytics_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'].sum(),
                            '–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã': analytics_df['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum(),
                            '–ö—É–ø–∏–ª–∏': analytics_df['–ö—É–ø–∏–ª–∏'].sum(),
                            '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–∫—É–ø–∫—É (%)': round(
                                (analytics_df['–ö—É–ø–∏–ª–∏'].sum() / analytics_df['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum() * 100), 2
                            ) if analytics_df['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum() > 0 else 0,
                            '–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î': analytics_df['–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î'].sum() if '–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î' in analytics_df.columns else 0,
                            '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)': round(
                                (analytics_df['–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î'].sum() / analytics_df['–ö—É–ø–∏–ª–∏'].sum() * 100), 2
                            ) if analytics_df['–ö—É–ø–∏–ª–∏'].sum() > 0 else 0
                        }
                        ordered_rows.append(overall_summary)
                        
                        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º
                        analytics_df_with_total = pd.DataFrame(ordered_rows)
                        

                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–∞–Ω–µ–ª–∏
                        total_leads = analytics_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'].sum()
                        total_prequalified = analytics_df['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum()
                        total_purchased = analytics_df['–ö—É–ø–∏–ª–∏'].sum()
                        
                        # –ë–ï–ó–û–ü–ê–°–ù–û –ø–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –Ω–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π
                        total_new_activations = analytics_df['–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î'].sum()
                        
                        # –°—Ä–µ–¥–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
                        avg_lead_to_sql = round((total_prequalified / total_leads * 100), 2) if total_leads > 0 else 0
                        avg_sql_to_sale = round((total_purchased / total_prequalified * 100), 2) if total_prequalified > 0 else 0
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–∞–Ω–µ–ª—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
                        st.subheader("üìä –ö–õ–Æ–ß–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò")
                        
                        # –°–æ–∑–¥–∞–µ–º 6 –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –º–µ—Ç—Ä–∏–∫
                        col1, col2, col3, col4, col5, col6 = st.columns(6)
                        
                        with col1:
                            st.metric(
                                label="–õ–∏–¥—ã",
                                value=f"{total_leads:,}".replace(",", " "),
                                help="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤"
                            )
                        
                        with col2:
                            st.metric(
                                label="SQL",
                                value=f"{total_prequalified:,}".replace(",", " "),
                                help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤"
                            )
                        
                        with col3:
                            st.metric(
                                label="–ö—É–ø–∏–ª–∏",
                                value=f"{total_purchased:,}".replace(",", " "),
                                help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂"
                            )
                        
                        with col4:
                            # –ë–ï–ó–û–ü–ê–°–ù–û –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –Ω–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π
                            try:
                                st.metric(
                                    label="–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î",
                                    value=f"{total_new_activations:,}".replace(",", " "),
                                    help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¢–°–î"
                                )
                            except:
                                st.metric(
                                    label="–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î",
                                    value="0",
                                    help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¢–°–î"
                                )
                        
                        with col5:
                            st.metric(
                                label="–ö–æ–Ω–≤–µ—Ä—Å–∏—è –õ–∏–¥ ‚Üí SQL",
                                value=f"{avg_lead_to_sql}%",
                                help="–°—Ä–µ–¥–Ω—è—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –ª–∏–¥–æ–≤ –≤ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ"
                            )
                        
                        with col6:
                            st.metric(
                                label="–ö–æ–Ω–≤–µ—Ä—Å–∏—è SQL ‚Üí –ü—Ä–æ–¥–∞–∂–∞",
                                value=f"{avg_sql_to_sale}%",
                                help="–°—Ä–µ–¥–Ω—è—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–¥–∞–∂–∏"
                            )
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                        st.markdown("---")
                        
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Period –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        analytics_df_with_total['–ú–µ—Å—è—Ü'] = analytics_df_with_total['–ú–µ—Å—è—Ü'].astype(str)
                        
                        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫ –¥–ª—è –º–µ—Å—è—Ü–µ–≤
                        # –ú–µ—Å—è—Ü –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
                        month_display = analytics_df_with_total['–ú–µ—Å—è—Ü'].copy()
                        current_month = None
                        
                        for idx in range(len(analytics_df_with_total)):
                            month = analytics_df_with_total.iloc[idx]['–ú–µ—Å—è—Ü']
                            source = analytics_df_with_total.iloc[idx]['–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞']
                            
                            # –î–ª—è —Å—Ç—Ä–æ–∫ "–ò–¢–û–ì–û –ü–û –ú–ï–°–Ø–¶–£" –æ—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—è—Ü –∫–∞–∫ –µ—Å—Ç—å
                            if source == '–ò–¢–û–ì–û –ü–û –ú–ï–°–Ø–¶–£':
                                month_display.iloc[idx] = month
                                current_month = month
                            elif month != current_month:
                                current_month = month
                                # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—è—Ü –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
                            else:
                                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ —Ç–æ–≥–æ –∂–µ –º–µ—Å—è—Ü–∞ –¥–µ–ª–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
                                month_display.iloc[idx] = ''
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å—Ç–æ–ª–±—Ü–æ–º –º–µ—Å—è—Ü–∞
                        display_df = analytics_df_with_total.copy()
                        display_df['–ú–µ—Å—è—Ü'] = month_display
                        
                        # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã - "–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î" –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π, "–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)" –ø–æ—Å–ª–µ–¥–Ω–∏–π
                        if '–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î' in display_df.columns and '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)' in display_df.columns:
                            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã –∫—Ä–æ–º–µ "–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î" –∏ "–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)"
                            other_columns = [col for col in display_df.columns if col not in ['–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)']]
                            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤: –¥—Ä—É–≥–∏–µ —Å—Ç–æ–ª–±—Ü—ã + "–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î" + "–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)"
                            new_column_order = other_columns + ['–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)']
                            # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º DataFrame
                            display_df = display_df[new_column_order]
                            st.info("‚úÖ –°—Ç–æ–ª–±—Ü—ã –ø–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã: '–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î' –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π, '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)' –ø–æ—Å–ª–µ–¥–Ω–∏–π")
                        
                        st.success(f"‚úÖ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞! –†–∞–∑–º–µ—Ä: {analytics_df.shape[0]} —Å—Ç—Ä–æ–∫, {analytics_df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
                        st.info(f"üìä –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –≤—Å–µ—Ö {len(leads_analysis_clean)} –ª–∏–¥–∞—Ö –∏–∑ leads2025")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É —Å –∏—Ç–æ–≥–∞–º–∏
                        st.subheader("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ª–∏–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º:")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ª–±—Ü–∞ "–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î"
                        if '–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î' in display_df.columns:
                            st.success("‚úÖ –°—Ç–æ–ª–±–µ—Ü '–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É")
                        else:
                            st.warning("‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü '–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–Ω—É —Ç–∞–±–ª–∏—Ü—É —Å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π –ø–æ –¥–∞—Ç–µ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞
                        st.dataframe(display_df, use_container_width=True)
                        
                        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Ç—Ä–∞—Ñ–∏–∫–∞ (—Ç–µ–ø–µ—Ä—å –≤—Å—Ç—Ä–æ–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É)
                        st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫ –ª–∏–¥–æ–≤ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Ç—Ä–∞—Ñ–∏–∫–∞:")
                        
                        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
                        fig_traffic = go.Figure()
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
                        for source in analytics_df['–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞'].unique():
                            source_data = analytics_df[analytics_df['–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞'] == source]
                            source_data['–ú–µ—Å—è—Ü'] = source_data['–ú–µ—Å—è—Ü'].astype(str)
                            
                            fig_traffic.add_trace(
                                go.Scatter(
                                    x=source_data['–ú–µ—Å—è—Ü'],
                                    y=source_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'],
                                    mode='lines+markers',
                                    name=source,
                                    line=dict(width=3)
                                )
                            )
                        
                        fig_traffic.update_layout(
                            height=500,
                            title_text="–î–∏–Ω–∞–º–∏–∫–∞ –ª–∏–¥–æ–≤ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Ç—Ä–∞—Ñ–∏–∫–∞",
                            xaxis_title="–ú–µ—Å—è—Ü",
                            yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤",
                            showlegend=True
                        )
                        
                        st.plotly_chart(fig_traffic, use_container_width=True)
                        
                        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                        st.subheader("üìä –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –ª–∏–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º:")
                        
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Period –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        analytics_df_display = analytics_df.reset_index()
                        analytics_df_display['–ú–µ—Å—è—Ü'] = analytics_df_display['–ú–µ—Å—è—Ü'].astype(str)
                        
                        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –¥–≤—É–º—è –ª–∏–Ω–∏—è–º–∏
                        import plotly.express as px
                        import plotly.graph_objects as go
                        from plotly.subplots import make_subplots
                        
                        fig = make_subplots(
                            rows=2, cols=1,
                            subplot_titles=('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é (%)'),
                            vertical_spacing=0.1
                        )
                        
                        # –ü–µ—Ä–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤
                        fig.add_trace(
                            go.Scatter(
                                x=analytics_df_display['–ú–µ—Å—è—Ü'],
                                y=analytics_df_display['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'],
                                mode='lines+markers',
                                name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤',
                                line=dict(color='blue', width=3)
                            ),
                            row=1, col=1
                        )
                        
                        fig.add_trace(
                            go.Scatter(
                                x=analytics_df_display['–ú–µ—Å—è—Ü'],
                                y=analytics_df_display['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'],
                                mode='lines+markers',
                                name='–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã',
                                line=dict(color='green', width=3)
                            ),
                            row=1, col=1
                        )
                        
                        # –í—Ç–æ—Ä–æ–π –≥—Ä–∞—Ñ–∏–∫ - –∫–æ–Ω–≤–µ—Ä—Å–∏—è
                        fig.add_trace(
                            go.Scatter(
                                x=analytics_df_display['–ú–µ—Å—è—Ü'],
                                y=analytics_df_display['–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é (%)'],
                                mode='lines+markers',
                                name='–ö–æ–Ω–≤–µ—Ä—Å–∏—è (%)',
                                line=dict(color='red', width=3)
                            ),
                            row=2, col=1
                        )
                        
                        fig.update_layout(
                            height=600,
                            title_text="–î–∏–Ω–∞–º–∏–∫–∞ –ª–∏–¥–æ–≤ –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º",
                            showlegend=True
                        )
                        
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # ===== –¢–ê–ë–õ–ò–¶–ê 2: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ª–∏–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º (–±–µ–∑ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º) =====
                        st.subheader("üìä –¢–ê–ë–õ–ò–¶–ê 2: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ª–∏–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º (–±–µ–∑ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º)")
                        
                        try:
                            st.info("üìã –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É 2 –±–µ–∑ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º...")
                            
                            # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É —Ç–æ–ª—å–∫–æ –ø–æ –º–µ—Å—è—Ü–∞–º
                            analytics_df_monthly = leads_analysis_clean.groupby(['–ú–µ—Å—è—Ü']).agg({
                                'ID': 'count',  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
                            }).rename(columns={
                                'ID': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'
                            }).reset_index()
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü "–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î" –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω—É–ª—è–º–∏
                            analytics_df_monthly['–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î'] = 0
                            
                            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏—è—Ö, –∑–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç–æ–ª–±–µ—Ü
                            if 'total_new_activations' in locals() and total_new_activations > 0:
                                # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–∏–¥–æ–≤
                                total_leads_monthly = analytics_df_monthly['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'].sum()
                                for idx, row in analytics_df_monthly.iterrows():
                                    month = row['–ú–µ—Å—è—Ü']
                                    month_leads = row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤']
                                    # –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                                    month_activations = int((month_leads / total_leads_monthly) * total_new_activations)
                                    analytics_df_monthly.loc[idx, '–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î'] = month_activations
                            
                            # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤
                            prequalified_mask_monthly = leads_analysis_clean['–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏'] == '–õ–∏–¥ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'
                            
                            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã —Ç–æ–ª—å–∫–æ –ø–æ –º–µ—Å—è—Ü–∞–º
                            prequalified_by_month = leads_analysis_clean[prequalified_mask_monthly].groupby(['–ú–µ—Å—è—Ü'])['ID'].count().reset_index()
                            prequalified_by_month = prequalified_by_month.rename(columns={'ID': '–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'})
                            
                            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ª–∏–¥–∞–º–∏
                            analytics_df_monthly = analytics_df_monthly.merge(
                                prequalified_by_month,
                                on=['–ú–µ—Å—è—Ü'],
                                how='left'
                            )
                            
                            # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è –Ω—É–ª—è–º–∏
                            analytics_df_monthly['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'] = analytics_df_monthly['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].fillna(0).astype(int)
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é
                            analytics_df_monthly['–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é (%)'] = (
                                (analytics_df_monthly['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'] / analytics_df_monthly['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'] * 100)
                                .round(2)
                            )
                            
                            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
                            analytics_df_monthly = analytics_df_monthly.sort_values('–ú–µ—Å—è—Ü')
                            
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏ —Å—Ä–µ–¥–∏ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –ø–æ –º–µ—Å—è—Ü–∞–º)
                            st.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏ —Å—Ä–µ–¥–∏ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤ (–ø–æ –º–µ—Å—è—Ü–∞–º)...")
                            
                            if len(prequalified_leads) > 0:
                                # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∫—É–ø–æ–∫ –ø–æ –º–µ—Å—è—Ü–∞–º
                                purchased_results_monthly = []
                                
                                # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ —É—á—Ç–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                                processed_contacts_monthly = set()
                                
                                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü –æ—Ç–¥–µ–ª—å–Ω–æ
                                for month in sorted(leads_analysis_clean['–ú–µ—Å—è—Ü'].unique()):
                                    month_leads = prequalified_leads[prequalified_leads['–ú–µ—Å—è—Ü'] == month]
                                    purchased_count = 0
                                    
                                    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏–¥–∞ –≤ –º–µ—Å—è—Ü–µ –∏—â–µ–º –ø–æ–∫—É–ø–∫–∏
                                    for _, lead in month_leads.iterrows():
                                        found_purchase = False
                                        
                                        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                                        contact_key = None
                                        
                                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ClientID > Yclid > _ym_uid > –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç)
                                        if pd.notna(lead['ClientID']) and lead['ClientID'] != '':
                                            contact_key = f"ClientID_{lead['ClientID']}"
                                        elif pd.notna(lead['Yclid']) and lead['Yclid'] != '':
                                            contact_key = f"Yclid_{lead['Yclid']}"
                                        elif pd.notna(lead['_ym_uid']) and lead['_ym_uid'] != '':
                                            contact_key = f"_ym_uid_{lead['_ym_uid']}"
                                        elif pd.notna(lead['–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç']) and lead['–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç'] != '':
                                            contact_key = f"Contact_{lead['–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç']}"
                                        
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç
                                        if contact_key is None or contact_key in processed_contacts_monthly:
                                            continue
                                        
                                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞
                                        lead_date = lead['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è']
                                        
                                        # –ò—â–µ–º –ø–æ–∫—É–ø–∫–∏ –ø–æ –≤—Å–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º
                                        for identifier_col in ['ClientID', 'Yclid', '_ym_uid', '–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç']:
                                            if not found_purchase and pd.notna(lead[identifier_col]) and lead[identifier_col] != '':
                                                successful_purchases = purchases_df[
                                                    (purchases_df[identifier_col] == lead[identifier_col]) & 
                                                    (purchases_df['–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏'] == '–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ')
                                                ]
                                                
                                                for _, purchase in successful_purchases.iterrows():
                                                    if pd.notna(purchase['–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è']):
                                                        purchase_date = pd.to_datetime(purchase['–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è'], errors='coerce')
                                                        if pd.notna(purchase_date) and purchase_date > lead_date:
                                                            purchased_count += 1
                                                            found_purchase = True
                                                            processed_contacts_monthly.add(contact_key)
                                                            break
                                                
                                                if found_purchase:
                                                    break
                                        
                                        if found_purchase:
                                            break
                                    
                                    purchased_results_monthly.append({
                                        '–ú–µ—Å—è—Ü': month,
                                        '–ö—É–ø–∏–ª–∏': purchased_count
                                    })
                                
                                # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∫—É–ø–æ–∫
                                purchased_df_monthly = pd.DataFrame(purchased_results_monthly)
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü "–ö—É–ø–∏–ª–∏" –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É
                                analytics_df_monthly = analytics_df_monthly.merge(
                                    purchased_df_monthly,
                                    on=['–ú–µ—Å—è—Ü'],
                                    how='left'
                                )
                                analytics_df_monthly['–ö—É–ø–∏–ª–∏'] = analytics_df_monthly['–ö—É–ø–∏–ª–∏'].fillna(0).astype(int)
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü "–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–∫—É–ø–∫—É (%)"
                                analytics_df_monthly['–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–∫—É–ø–∫—É (%)'] = (
                                    (analytics_df_monthly['–ö—É–ø–∏–ª–∏'] / analytics_df_monthly['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'] * 100)
                                    .round(2)
                                ).fillna(0)
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü "–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)"
                                analytics_df_monthly['–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)'] = (
                                    (analytics_df_monthly['–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î'] / analytics_df_monthly['–ö—É–ø–∏–ª–∏'] * 100)
                                    .round(2)
                                ).fillna(0)
                                
                                total_purchased_monthly = purchased_df_monthly['–ö—É–ø–∏–ª–∏'].sum()
                                st.success(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—É–ø–æ–∫ –ø–æ –º–µ—Å—è—Ü–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {total_purchased_monthly} –ø–æ–∫—É–ø–æ–∫")
                                
                            else:
                                st.warning("‚ö†Ô∏è –ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                                # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç–æ–ª–±—Ü—ã
                                analytics_df_monthly['–ö—É–ø–∏–ª–∏'] = 0
                                analytics_df_monthly['–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–∫—É–ø–∫—É (%)'] = 0.0
                                analytics_df_monthly['–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)'] = 0.0
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                            total_monthly = {
                                '–ú–µ—Å—è—Ü': '–ò—Ç–æ–≥–æ',
                                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤': analytics_df_monthly['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'].sum(),
                                '–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã': analytics_df_monthly['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum(),
                                '–ö—É–ø–∏–ª–∏': analytics_df_monthly['–ö—É–ø–∏–ª–∏'].sum(),
                                '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é (%)': round(
                                    (analytics_df_monthly['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum() / analytics_df_monthly['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'].sum() * 100), 2
                                ) if analytics_df_monthly['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'].sum() > 0 else 0,
                                '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–∫—É–ø–∫—É (%)': round(
                                    (analytics_df_monthly['–ö—É–ø–∏–ª–∏'].sum() / analytics_df_monthly['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum() * 100), 2
                                ) if analytics_df_monthly['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum() > 0 else 0,
                                '–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î': analytics_df_monthly['–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î'].sum(),
                                '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)': round(
                                    (analytics_df_monthly['–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î'].sum() / analytics_df_monthly['–ö—É–ø–∏–ª–∏'].sum() * 100), 2
                                ) if analytics_df_monthly['–ö—É–ø–∏–ª–∏'].sum() > 0 else 0
                            }
                            
                            # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π
                            analytics_df_monthly_with_total = pd.concat([
                                analytics_df_monthly,
                                pd.DataFrame([total_monthly])
                            ], ignore_index=True)
                            
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Period –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            analytics_df_monthly_with_total['–ú–µ—Å—è—Ü'] = analytics_df_monthly_with_total['–ú–µ—Å—è—Ü'].astype(str)
                            
                            # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã - "–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î" –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π, "–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)" –ø–æ—Å–ª–µ–¥–Ω–∏–π
                            if '–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î' in analytics_df_monthly_with_total.columns and '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)' in analytics_df_monthly_with_total.columns:
                                other_columns = [col for col in analytics_df_monthly_with_total.columns if col not in ['–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)']]
                                new_column_order = other_columns + ['–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)']
                                analytics_df_monthly_with_total = analytics_df_monthly_with_total[new_column_order]
                                st.info("‚úÖ –°—Ç–æ–ª–±—Ü—ã –ø–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã: '–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î' –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π, '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)' –ø–æ—Å–ª–µ–¥–Ω–∏–π")
                            
                            st.success(f"‚úÖ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞ 2 —Å–æ–∑–¥–∞–Ω–∞! –†–∞–∑–º–µ—Ä: {len(analytics_df_monthly)} —Å—Ç—Ä–æ–∫, {len(analytics_df_monthly.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É 2
                            st.dataframe(analytics_df_monthly_with_total, use_container_width=True)
                            
                            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã 2
                            st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –ª–∏–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º (–±–µ–∑ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º):")
                            
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Period –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            analytics_df_monthly_display = analytics_df_monthly.reset_index()
                            analytics_df_monthly_display['–ú–µ—Å—è—Ü'] = analytics_df_monthly_display['–ú–µ—Å—è—Ü'].astype(str)
                            
                            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –¥–≤—É–º—è –ª–∏–Ω–∏—è–º–∏
                            fig_monthly = make_subplots(
                                rows=2, cols=1,
                                subplot_titles=('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é (%)'),
                                vertical_spacing=0.1
                            )
                            
                            # –ü–µ—Ä–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤
                            fig_monthly.add_trace(
                                go.Scatter(
                                    x=analytics_df_monthly_display['–ú–µ—Å—è—Ü'],
                                    y=analytics_df_monthly_display['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'],
                                    mode='lines+markers',
                                    name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤',
                                    line=dict(color='blue', width=3)
                                ),
                                row=1, col=1
                            )
                            
                            fig_monthly.add_trace(
                                go.Scatter(
                                    x=analytics_df_monthly_display['–ú–µ—Å—è—Ü'],
                                    y=analytics_df_monthly_display['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'],
                                    mode='lines+markers',
                                    name='–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã',
                                    line=dict(color='green', width=3)
                                ),
                                row=1, col=1
                            )
                            
                            # –í—Ç–æ—Ä–æ–π –≥—Ä–∞—Ñ–∏–∫ - –∫–æ–Ω–≤–µ—Ä—Å–∏—è
                            fig_monthly.add_trace(
                                go.Scatter(
                                    x=analytics_df_monthly_display['–ú–µ—Å—è—Ü'],
                                    y=analytics_df_monthly_display['–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é (%)'],
                                    mode='lines+markers',
                                    name='–ö–æ–Ω–≤–µ—Ä—Å–∏—è (%)',
                                    line=dict(color='red', width=3)
                                ),
                                row=2, col=1
                            )
                            
                            fig_monthly.update_layout(
                                height=600,
                                title_text="–î–∏–Ω–∞–º–∏–∫–∞ –ª–∏–¥–æ–≤ –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º (–±–µ–∑ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º)",
                                showlegend=True
                            )
                            
                            st.plotly_chart(fig_monthly, use_container_width=True)
                            
                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã 2: {str(e)}")
                        
                        # ===== –ö–û–ù–ï–¶ –¢–ê–ë–õ–ò–¶–´ 2 =====
                        
                    else:
                        st.error("‚ùå –°—Ç–æ–ª–±–µ—Ü '–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")
                        
                else:
                    st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                    
            else:
                st.error("‚ùå –°—Ç–æ–ª–±–µ—Ü '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")
                
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")
            analytics_df = None
            
    else:
        st.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.")
    
    # ===== –¢–ê–ë–õ–ò–¶–ê 2: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ª–∏–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º (–±–µ–∑ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º) =====
    # –≠—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —É—Å–ª–æ–≤–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    st.subheader("üìä –¢–ê–ë–õ–ò–¶–ê 2: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ª–∏–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º (–±–µ–∑ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º)")
    
    try:
        st.info("üìã –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É 2 –±–µ–∑ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if 'leads_df' in locals() and len(leads_df) > 0:
            # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É —Ç–æ–ª—å–∫–æ –ø–æ –º–µ—Å—è—Ü–∞–º
            leads_monthly = leads_df.copy()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
            if '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è' in leads_monthly.columns:
                leads_monthly['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'] = pd.to_datetime(leads_monthly['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'], errors='coerce')
                leads_monthly['–ú–µ—Å—è—Ü'] = leads_monthly['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.to_period('M')
                leads_monthly_clean = leads_monthly[leads_monthly['–ú–µ—Å—è—Ü'].notna()].copy()
                
                if len(leads_monthly_clean) > 0:
                    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É —Ç–æ–ª—å–∫–æ –ø–æ –º–µ—Å—è—Ü–∞–º
                    analytics_df_monthly = leads_monthly_clean.groupby(['–ú–µ—Å—è—Ü']).agg({
                        'ID': 'count',  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
                    }).rename(columns={
                        'ID': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'
                    }).reset_index()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü "–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î" –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω—É–ª—è–º–∏
                    analytics_df_monthly['–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î'] = 0
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏—è—Ö, –∑–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç–æ–ª–±–µ—Ü
                    if 'total_new_activations' in locals() and total_new_activations > 0:
                        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–∏–¥–æ–≤
                        total_leads_monthly = analytics_df_monthly['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'].sum()
                        for idx, row in analytics_df_monthly.iterrows():
                            month = row['–ú–µ—Å—è—Ü']
                            month_leads = row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤']
                            # –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                            month_activations = int((month_leads / total_leads_monthly) * total_new_activations)
                            analytics_df_monthly.loc[idx, '–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î'] = month_activations
                    
                    # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤
                    if '–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏' in leads_monthly_clean.columns:
                        prequalified_mask_monthly = leads_monthly_clean['–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏'] == '–õ–∏–¥ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'
                        
                        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã —Ç–æ–ª—å–∫–æ –ø–æ –º–µ—Å—è—Ü–∞–º
                        prequalified_by_month = leads_monthly_clean[prequalified_mask_monthly].groupby(['–ú–µ—Å—è—Ü'])['ID'].count().reset_index()
                        prequalified_by_month = prequalified_by_month.rename(columns={'ID': '–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'})
                        
                        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ª–∏–¥–∞–º–∏
                        analytics_df_monthly = analytics_df_monthly.merge(
                            prequalified_by_month,
                            on=['–ú–µ—Å—è—Ü'],
                            how='left'
                        )
                        
                        # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è –Ω—É–ª—è–º–∏
                        analytics_df_monthly['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'] = analytics_df_monthly['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].fillna(0).astype(int)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é
                        analytics_df_monthly['–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é (%)'] = (
                            (analytics_df_monthly['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'] / analytics_df_monthly['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'] * 100)
                            .round(2)
                        )
                        
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
                        analytics_df_monthly = analytics_df_monthly.sort_values('–ú–µ—Å—è—Ü')
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏ —Å—Ä–µ–¥–∏ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –ø–æ –º–µ—Å—è—Ü–∞–º)
                        st.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏ —Å—Ä–µ–¥–∏ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤ (–ø–æ –º–µ—Å—è—Ü–∞–º)...")
                        
                        prequalified_leads_monthly = leads_monthly_clean[prequalified_mask_monthly].copy()
                        
                        if len(prequalified_leads_monthly) > 0:
                            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∫—É–ø–æ–∫ –ø–æ –º–µ—Å—è—Ü–∞–º
                            purchased_results_monthly = []
                            
                            # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ —É—á—Ç–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                            processed_contacts_monthly = set()
                            
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü –æ—Ç–¥–µ–ª—å–Ω–æ
                            for month in sorted(leads_monthly_clean['–ú–µ—Å—è—Ü'].unique()):
                                month_leads = prequalified_leads_monthly[prequalified_leads_monthly['–ú–µ—Å—è—Ü'] == month]
                                purchased_count = 0
                                
                                # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏–¥–∞ –≤ –º–µ—Å—è—Ü–µ –∏—â–µ–º –ø–æ–∫—É–ø–∫–∏
                                for _, lead in month_leads.iterrows():
                                    found_purchase = False
                                    
                                    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                                    contact_key = None
                                    
                                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ClientID > Yclid > _ym_uid > –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç)
                                    if pd.notna(lead['ClientID']) and lead['ClientID'] != '':
                                        contact_key = f"ClientID_{lead['ClientID']}"
                                    elif pd.notna(lead['Yclid']) and lead['Yclid'] != '':
                                        contact_key = f"Yclid_{lead['Yclid']}"
                                    elif pd.notna(lead['_ym_uid']) and lead['_ym_uid'] != '':
                                        contact_key = f"_ym_uid_{lead['_ym_uid']}"
                                    elif pd.notna(lead['–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç']) and lead['–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç'] != '':
                                        contact_key = f"Contact_{lead['–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç']}"
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç
                                    if contact_key is None or contact_key in processed_contacts_monthly:
                                        continue
                                    
                                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞
                                    lead_date = lead['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è']
                                    
                                    # –ò—â–µ–º –ø–æ–∫—É–ø–∫–∏ –ø–æ –≤—Å–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º
                                    if 'purchases_df' in locals() and len(purchases_df) > 0:
                                        for identifier_col in ['ClientID', 'Yclid', '_ym_uid', '–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç']:
                                            if not found_purchase and pd.notna(lead[identifier_col]) and lead[identifier_col] != '':
                                                if identifier_col in purchases_df.columns and '–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏' in purchases_df.columns:
                                                    successful_purchases = purchases_df[
                                                        (purchases_df[identifier_col] == lead[identifier_col]) & 
                                                        (purchases_df['–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏'] == '–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ')
                                                    ]
                                                    
                                                    for _, purchase in successful_purchases.iterrows():
                                                        if pd.notna(purchase['–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è']):
                                                            purchase_date = pd.to_datetime(purchase['–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è'], errors='coerce')
                                                            if pd.notna(purchase_date) and purchase_date > lead_date:
                                                                purchased_count += 1
                                                                found_purchase = True
                                                                processed_contacts_monthly.add(contact_key)
                                                                break
                                                
                                                if found_purchase:
                                                    break
                                        
                                        if found_purchase:
                                            break
                                
                                purchased_results_monthly.append({
                                    '–ú–µ—Å—è—Ü': month,
                                    '–ö—É–ø–∏–ª–∏': purchased_count
                                })
                            
                            # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∫—É–ø–æ–∫
                            purchased_df_monthly = pd.DataFrame(purchased_results_monthly)
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü "–ö—É–ø–∏–ª–∏" –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É
                            analytics_df_monthly = analytics_df_monthly.merge(
                                purchased_df_monthly,
                                on=['–ú–µ—Å—è—Ü'],
                                how='left'
                            )
                            analytics_df_monthly['–ö—É–ø–∏–ª–∏'] = analytics_df_monthly['–ö—É–ø–∏–ª–∏'].fillna(0).astype(int)
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü "–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–∫—É–ø–∫—É (%)"
                            analytics_df_monthly['–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–∫—É–ø–∫—É (%)'] = (
                                (analytics_df_monthly['–ö—É–ø–∏–ª–∏'] / analytics_df_monthly['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'] * 100)
                                .round(2)
                            ).fillna(0)
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü "–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)"
                            analytics_df_monthly['–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)'] = (
                                (analytics_df_monthly['–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î'] / analytics_df_monthly['–ö—É–ø–∏–ª–∏'] * 100)
                                .round(2)
                            ).fillna(0)
                            
                            total_purchased_monthly = purchased_df_monthly['–ö—É–ø–∏–ª–∏'].sum()
                            st.success(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—É–ø–æ–∫ –ø–æ –º–µ—Å—è—Ü–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {total_purchased_monthly} –ø–æ–∫—É–ø–æ–∫")
                            
                        else:
                            st.warning("‚ö†Ô∏è –ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç–æ–ª–±—Ü—ã
                            analytics_df_monthly['–ö—É–ø–∏–ª–∏'] = 0
                            analytics_df_monthly['–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–∫—É–ø–∫—É (%)'] = 0.0
                            analytics_df_monthly['–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)'] = 0.0
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                        total_monthly = {
                            '–ú–µ—Å—è—Ü': '–ò—Ç–æ–≥–æ',
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤': analytics_df_monthly['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'].sum(),
                            '–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã': analytics_df_monthly['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum(),
                            '–ö—É–ø–∏–ª–∏': analytics_df_monthly['–ö—É–ø–∏–ª–∏'].sum(),
                            '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é (%)': round(
                                (analytics_df_monthly['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum() / analytics_df_monthly['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'].sum() * 100), 2
                            ) if analytics_df_monthly['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'].sum() > 0 else 0,
                            '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–∫—É–ø–∫—É (%)': round(
                                (analytics_df_monthly['–ö—É–ø–∏–ª–∏'].sum() / analytics_df_monthly['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum() * 100), 2
                            ) if analytics_df_monthly['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum() > 0 else 0,
                            '–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î': analytics_df_monthly['–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î'].sum(),
                            '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)': round(
                                (analytics_df_monthly['–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î'].sum() / analytics_df_monthly['–ö—É–ø–∏–ª–∏'].sum() * 100), 2
                            ) if analytics_df_monthly['–ö—É–ø–∏–ª–∏'].sum() > 0 else 0
                        }
                        
                        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π
                        analytics_df_monthly_with_total = pd.concat([
                            analytics_df_monthly,
                            pd.DataFrame([total_monthly])
                        ], ignore_index=True)
                        
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Period –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        analytics_df_monthly_with_total['–ú–µ—Å—è—Ü'] = analytics_df_monthly_with_total['–ú–µ—Å—è—Ü'].astype(str)
                        
                        # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã - "–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î" –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π, "–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)" –ø–æ—Å–ª–µ–¥–Ω–∏–π
                        if '–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î' in analytics_df_monthly_with_total.columns and '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)' in analytics_df_monthly_with_total.columns:
                            other_columns = [col for col in analytics_df_monthly_with_total.columns if col not in ['–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)']]
                            new_column_order = other_columns + ['–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)']
                            analytics_df_monthly_with_total = analytics_df_monthly_with_total[new_column_order]
                            st.info("‚úÖ –°—Ç–æ–ª–±—Ü—ã –ø–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã: '–ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–°–î' –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π, '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (%)' –ø–æ—Å–ª–µ–¥–Ω–∏–π")
                        
                        st.success(f"‚úÖ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞ 2 —Å–æ–∑–¥–∞–Ω–∞! –†–∞–∑–º–µ—Ä: {len(analytics_df_monthly)} —Å—Ç—Ä–æ–∫, {len(analytics_df_monthly.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É 2
                        st.dataframe(analytics_df_monthly_with_total, use_container_width=True)
                        
                        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã 2
                        st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –ª–∏–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º (–±–µ–∑ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º):")
                        
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Period –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        analytics_df_monthly_display = analytics_df_monthly.reset_index()
                        analytics_df_monthly_display['–ú–µ—Å—è—Ü'] = analytics_df_monthly_display['–ú–µ—Å—è—Ü'].astype(str)
                        
                        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –¥–≤—É–º—è –ª–∏–Ω–∏—è–º–∏
                        fig_monthly = make_subplots(
                            rows=2, cols=1,
                            subplot_titles=('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é (%)'),
                            vertical_spacing=0.1
                        )
                        
                        # –ü–µ—Ä–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤
                        fig_monthly.add_trace(
                            go.Scatter(
                                x=analytics_df_monthly_display['–ú–µ—Å—è—Ü'],
                                y=analytics_df_monthly_display['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'],
                                mode='lines+markers',
                                name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤',
                                line=dict(color='blue', width=3)
                            ),
                            row=1, col=1
                        )
                        
                        fig_monthly.add_trace(
                            go.Scatter(
                                x=analytics_df_monthly_display['–ú–µ—Å—è—Ü'],
                                y=analytics_df_monthly_display['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'],
                                mode='lines+markers',
                                name='–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã',
                                line=dict(color='green', width=3)
                            ),
                            row=1, col=1
                        )
                        
                        # –í—Ç–æ—Ä–æ–π –≥—Ä–∞—Ñ–∏–∫ - –∫–æ–Ω–≤–µ—Ä—Å–∏—è
                        fig_monthly.add_trace(
                            go.Scatter(
                                x=analytics_df_monthly_display['–ú–µ—Å—è—Ü'],
                                y=analytics_df_monthly_display['–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é (%)'],
                                mode='lines+markers',
                                name='–ö–æ–Ω–≤–µ—Ä—Å–∏—è (%)',
                                line=dict(color='red', width=3)
                            ),
                            row=2, col=1
                        )
                        
                        fig_monthly.update_layout(
                            height=600,
                            title_text="–î–∏–Ω–∞–º–∏–∫–∞ –ª–∏–¥–æ–≤ –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º (–±–µ–∑ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º)",
                            showlegend=True
                        )
                        
                        st.plotly_chart(fig_monthly, use_container_width=True)
                        
                    else:
                        st.warning("‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü '–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")
                        
                else:
                    st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                    
            else:
                st.warning("‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")
        else:
            st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ª–∏–¥–∞—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã 2")
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã 2: {str(e)}")
    
    # ===== –ö–û–ù–ï–¶ –¢–ê–ë–õ–ò–¶–´ 2 =====

if __name__ == "__main__":
    main()