import pandas as pd
import streamlit as st
import plotly.graph_objects as go

# –ß—Ç–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –ª–∏–¥–∞–º–∏
    leads_df = pd.read_csv('leads2025.csv')
    st.success(f"‚úÖ –§–∞–π–ª leads2025.csv —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –†–∞–∑–º–µ—Ä: {leads_df.shape[0]} —Å—Ç—Ä–æ–∫, {leads_df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
    
except FileNotFoundError:
    st.error("‚ùå –§–∞–π–ª leads2025.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    leads_df = None
except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ leads2025.csv: {str(e)}")
    leads_df = None

try:
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–∫—É–ø–∫–∞–º–∏
    purchases_df = pd.read_csv('purchases2025.csv')
    st.success(f"‚úÖ –§–∞–π–ª purchases2025.csv —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –†–∞–∑–º–µ—Ä: {purchases_df.shape[0]} —Å—Ç—Ä–æ–∫, {purchases_df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
    
except FileNotFoundError:
    st.error("‚ùå –§–∞–π–ª purchases2025.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    purchases_df = None
except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ purchases2025.csv: {str(e)}")
    purchases_df = None

try:
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏
    ymetrica_df = pd.read_csv('YMetrica.csv')
    st.success(f"‚úÖ –§–∞–π–ª YMetrica.csv —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –†–∞–∑–º–µ—Ä: {ymetrica_df.shape[0]} —Å—Ç—Ä–æ–∫, {ymetrica_df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
    
except FileNotFoundError:
    st.error("‚ùå –§–∞–π–ª YMetrica.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    ymetrica_df = None
except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ YMetrica.csv: {str(e)}")
    ymetrica_df = None

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
if leads_df is not None and purchases_df is not None and ymetrica_df is not None:
    st.success("üéâ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö
    st.subheader("üìä –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö:")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–õ–∏–¥—ã", f"{leads_df.shape[0]:,}")
        st.metric("–°—Ç–æ–ª–±—Ü—ã –ª–∏–¥–æ–≤", leads_df.shape[1])
        
    with col2:
        st.metric("–ü–æ–∫—É–ø–∫–∏", f"{purchases_df.shape[0]:,}")
        st.metric("–°—Ç–æ–ª–±—Ü—ã –ø–æ–∫—É–ø–æ–∫", purchases_df.shape[1])
        
    with col3:
        st.metric("–°–æ–±—ã—Ç–∏—è YM", f"{ymetrica_df.shape[0]:,}")
        st.metric("–°—Ç–æ–ª–±—Ü—ã YM", ymetrica_df.shape[1])
    
    # –¢–ê–ë–õ–ò–¶–ê 1: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ª–∏–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º (—Ç–æ–ª—å–∫–æ –∏–∑ leads2025)
    st.subheader("üìä –¢–ê–ë–õ–ò–¶–ê 1: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ª–∏–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –ª–∏–¥–æ–≤ –∏–∑ leads2025
        st.info("üìã –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –ª–∏–¥–æ–≤ –∏–∑ leads2025...")
        
        # –ë–µ—Ä–µ–º –≤—Å–µ –ª–∏–¥—ã –∏–∑ leads2025
        leads_analysis = leads_df.copy()
        
        # –®–∞–≥ 1: –ù–∞—Ö–æ–¥–∏–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å YMetrica –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
        st.info("üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –ª–∏–¥–æ–≤...")
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–æ–ª–±—Ü–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            leads_analysis['–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞'] = '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            if 'ClientID' not in ymetrica_df.columns:
                st.warning("‚ö†Ô∏è –í YMetrica –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü 'ClientID'. –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'.")
            elif 'firstTrafficSource' not in ymetrica_df.columns:
                st.warning("‚ö†Ô∏è –í YMetrica –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü 'firstTrafficSource'. –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'.")
            else:
                # –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤: –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, —É–±–∏—Ä–∞–µ–º .0 –∏ –Ω–µ–∞–ª—Ñ–∞–Ω—É–º —Å–∏–º–≤–æ–ª—ã
                def _normalize(series):
                    return (
                        series.astype(str)
                        .str.strip()
                        .str.replace(r'\\.0$', '', regex=True)
                        .str.replace(r'[^0-9A-Za-z]+', '', regex=True)
                        .str.lower()
                    )
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤ YMetrica
                ym_map_df = pd.DataFrame({
                    'ClientID_norm': _normalize(ymetrica_df['ClientID']),
                    'firstTrafficSource': ymetrica_df['firstTrafficSource']
                })
                ym_map_df = ym_map_df.dropna(subset=['ClientID_norm'])
                ym_map_df = ym_map_df[ym_map_df['ClientID_norm'].str.len() > 0]
                ym_map_df = ym_map_df.drop_duplicates(subset=['ClientID_norm'], keep='first')
                ym_mapping = dict(zip(ym_map_df['ClientID_norm'], ym_map_df['firstTrafficSource']))
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º–µ–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ leads (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∏–º–µ–Ω)
                yclid_col = 'Yclid' if 'Yclid' in leads_analysis.columns else ('yclid' if 'yclid' in leads_analysis.columns else None)
                ymuid_col = '_ym_uid' if '_ym_uid' in leads_analysis.columns else ('ym_uid' if 'ym_uid' in leads_analysis.columns else None)
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤ leads
                leads_analysis['Yclid_norm'] = _normalize(leads_analysis[yclid_col]) if yclid_col else ''
                leads_analysis['_ym_uid_norm'] = _normalize(leads_analysis[ymuid_col]) if ymuid_col else ''
                
                # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
                ym_clientids = ym_map_df['ClientID_norm']
                yclid_nonempty_unique = leads_analysis.loc[leads_analysis['Yclid_norm'] != '', 'Yclid_norm'].nunique()
                ymuid_nonempty_unique = leads_analysis.loc[leads_analysis['_ym_uid_norm'] != '', '_ym_uid_norm'].nunique()
                ym_unique = ym_clientids.nunique()
                overlap_yclid = leads_analysis['Yclid_norm'].isin(ym_clientids.values).sum()
                overlap_ymuid = leads_analysis['_ym_uid_norm'].isin(ym_clientids.values).sum()
                st.info(f"Yclid —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö (–Ω–µ –ø—É—Å—Ç—ã—Ö): {yclid_nonempty_unique}, _ym_uid —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö (–Ω–µ –ø—É—Å—Ç—ã—Ö): {ymuid_nonempty_unique}, YM ClientID —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {ym_unique}, –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π Yclid‚ÜîClientID: {overlap_yclid}, –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π _ym_uid‚ÜîClientID: {overlap_ymuid}")
                
                # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏: —Å–Ω–∞—á–∞–ª–∞ –ø–æ Yclid, –∑–∞—Ç–µ–º –ø–æ _ym_uid
                yclid_sources = leads_analysis['Yclid_norm'].map(ym_mapping)
                ymuid_sources = leads_analysis['_ym_uid_norm'].map(ym_mapping)
                final_sources = yclid_sources.fillna(ymuid_sources)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–æ–≤
                leads_analysis.loc[final_sources.notna(), '–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞'] = final_sources[final_sources.notna()]
                
                # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                matched_by_yclid = int((yclid_sources.notna()).sum())
                matched_by_ym_uid = int(((yclid_sources.isna()) & (ymuid_sources.notna())).sum())
                unmatched = int((leads_analysis['–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞'] == '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω').sum())
                
                st.success(f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã: –ø–æ Yclid - {matched_by_yclid}, –ø–æ _ym_uid - {matched_by_ym_uid}, –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ - {unmatched}")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
        if '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è' in leads_analysis.columns:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ datetime –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Å—è—Ü
            leads_analysis['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'] = pd.to_datetime(leads_analysis['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'], errors='coerce')
            leads_analysis['–ú–µ—Å—è—Ü'] = leads_analysis['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].dt.to_period('M')
            
            # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –¥–∞—Ç—ã
            leads_analysis_clean = leads_analysis[leads_analysis['–ú–µ—Å—è—Ü'].notna()].copy()
            
            if len(leads_analysis_clean) > 0:
                # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ –º–µ—Å—è—Ü–∞–º –ò –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Ç—Ä–∞—Ñ–∏–∫–∞
                if '–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏' in leads_analysis_clean.columns:
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü—É –∏ –∏—Å—Ç–æ—á–Ω–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞
                    analytics_df = leads_analysis_clean.groupby(['–ú–µ—Å—è—Ü', '–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞']).agg({
                        'ID': 'count',  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
                    }).rename(columns={
                        'ID': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'
                    }).reset_index()
                    
                    # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤
                    prequalified_mask = leads_analysis_clean['–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏'] == '–õ–∏–¥ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'
                    
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
                    prequalified_by_month_source = leads_analysis_clean[prequalified_mask].groupby(['–ú–µ—Å—è—Ü', '–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞'])['ID'].count().reset_index()
                    prequalified_by_month_source = prequalified_by_month_source.rename(columns={'ID': '–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'})
                    
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ª–∏–¥–∞–º–∏
                    analytics_df = analytics_df.merge(
                        prequalified_by_month_source,
                        on=['–ú–µ—Å—è—Ü', '–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞'],
                        how='left'
                    )
                    
                    # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è –Ω—É–ª—è–º–∏
                    analytics_df['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'] = analytics_df['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].fillna(0).astype(int)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é
                    analytics_df['–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é (%)'] = (
                        (analytics_df['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'] / analytics_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'] * 100)
                        .round(2)
                    )
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
                    analytics_df = analytics_df.sort_values(['–ú–µ—Å—è—Ü', '–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞'])
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü "–ö—É–ø–∏–ª–∏" - –∫—Ç–æ –∏–∑ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤ –≤ –∏—Ç–æ–≥–µ –∫—É–ø–∏–ª
                    st.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏ —Å—Ä–µ–¥–∏ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤...")
                    
                    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ª–∏–¥–∞–º–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
                    prequalified_leads = leads_analysis_clean[leads_analysis_clean['–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏'] == '–õ–∏–¥ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'].copy()
                    
                    if len(prequalified_leads) > 0:
                        st.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(prequalified_leads)} –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫—É–ø–æ–∫")
                        
                        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Ç—Ä–∞—Ñ–∏–∫–∞
                        purchased_results = []
                        
                        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ —É—á—Ç–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                        processed_contacts = set()
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
                        for (month, source) in prequalified_leads[['–ú–µ—Å—è—Ü', '–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞']].drop_duplicates().values:
                            month_source_leads = prequalified_leads[
                                (prequalified_leads['–ú–µ—Å—è—Ü'] == month) & 
                                (prequalified_leads['–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞'] == source)
                            ]
                            purchased_count = 0
                            
                            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏–¥–∞ –≤ –º–µ—Å—è—Ü–µ –∏—â–µ–º –ø–æ–∫—É–ø–∫–∏
                            for _, lead in month_source_leads.iterrows():
                                found_purchase = False
                                
                                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                                contact_key = None
                                
                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ClientID > Yclid > _ym_uid > –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç)
                                if pd.notna(lead['ClientID']) and lead['ClientID'] != '':
                                    contact_key = f"ClientID_{lead['ClientID']}"
                                elif pd.notna(lead['Yclid']) and lead['Yclid'] != '':
                                    contact_key = f"Yclid_{lead['Yclid']}"
                                elif pd.notna(lead['_ym_uid']) and lead['_ym_uid'] != '':
                                    contact_key = f"_ym_uid_{lead['_ym_uid']}"
                                elif pd.notna(lead['–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç']) and lead['–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç'] != '':
                                    contact_key = f"Contact_{lead['–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç']}"
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç
                                if contact_key is None or contact_key in processed_contacts:
                                    continue
                                
                                # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞
                                lead_date = lead['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è']
                                
                                # 1. –ò—â–µ–º –ø–æ ClientID
                                if pd.notna(lead['ClientID']) and lead['ClientID'] != '':
                                    # –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ"
                                    successful_purchases = purchases_df[
                                        (purchases_df['ClientID'] == lead['ClientID']) & 
                                        (purchases_df['–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏'] == '–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ')
                                    ]
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ —Å –¥–∞—Ç–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ—Å–ª–µ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞
                                    for _, purchase in successful_purchases.iterrows():
                                        if pd.notna(purchase['–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è']):
                                            purchase_date = pd.to_datetime(purchase['–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è'], errors='coerce')
                                            if pd.notna(purchase_date) and purchase_date > lead_date:
                                                purchased_count += 1
                                                found_purchase = True
                                                processed_contacts.add(contact_key)  # –û—Ç–º–µ—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                                                break  # –ù–∞—à–ª–∏ –ø–æ–∫—É–ø–∫—É, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
                                
                                # 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ ClientID, –∏—â–µ–º –ø–æ Yclid
                                if not found_purchase and pd.notna(lead['Yclid']) and lead['Yclid'] != '':
                                    successful_purchases = purchases_df[
                                        (purchases_df['Yclid'] == lead['Yclid']) & 
                                        (purchases_df['–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏'] == '–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ')
                                    ]
                                    
                                    for _, purchase in successful_purchases.iterrows():
                                        if pd.notna(purchase['–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è']):
                                            purchase_date = pd.to_datetime(purchase['–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è'], errors='coerce')
                                            if pd.notna(purchase_date) and purchase_date > lead_date:
                                                purchased_count += 1
                                                found_purchase = True
                                                processed_contacts.add(contact_key)  # –û—Ç–º–µ—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                                                break
                                
                                # 3. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ Yclid, –∏—â–µ–º –ø–æ _ym_uid
                                if not found_purchase and pd.notna(lead['_ym_uid']) and lead['_ym_uid'] != '':
                                    successful_purchases = purchases_df[
                                        (purchases_df['_ym_uid'] == lead['_ym_uid']) & 
                                        (purchases_df['–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏'] == '–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ')
                                    ]
                                    
                                    for _, purchase in successful_purchases.iterrows():
                                        if pd.notna(purchase['–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è']):
                                            purchase_date = pd.to_datetime(purchase['–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è'], errors='coerce')
                                            if pd.notna(purchase_date) and purchase_date > lead_date:
                                                purchased_count += 1
                                                found_purchase = True
                                                processed_contacts.add(contact_key)  # –û—Ç–º–µ—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                                                break
                                
                                # 4. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ _ym_uid, –∏—â–µ–º –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É
                                if not found_purchase and pd.notna(lead['–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç']) and lead['–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç'] != '':
                                    successful_purchases = purchases_df[
                                        (purchases_df['–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç'] == lead['–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç']) & 
                                        (purchases_df['–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏'] == '–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ')
                                    ]
                                    
                                    for _, purchase in successful_purchases.iterrows():
                                        if pd.notna(purchase['–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è']):
                                            purchase_date = pd.to_datetime(purchase['–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è'], errors='coerce')
                                            if pd.notna(purchase_date) and purchase_date > lead_date:
                                                purchased_count += 1
                                                found_purchase = True
                                                processed_contacts.add(contact_key)  # –û—Ç–º–µ—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                                                break
                            
                            purchased_results.append({
                                '–ú–µ—Å—è—Ü': month,
                                '–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞': source,
                                '–ö—É–ø–∏–ª–∏': purchased_count
                            })
                        
                        # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∫—É–ø–æ–∫
                        purchased_df = pd.DataFrame(purchased_results)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü "–ö—É–ø–∏–ª–∏" –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É
                        analytics_df = analytics_df.merge(
                            purchased_df,
                            on=['–ú–µ—Å—è—Ü', '–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞'],
                            how='left'
                        )
                        analytics_df['–ö—É–ø–∏–ª–∏'] = analytics_df['–ö—É–ø–∏–ª–∏'].fillna(0).astype(int)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü "–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–∫—É–ø–∫—É (%)" - –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫—É–ø–∏–≤—à–∏—Ö –∫ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
                        analytics_df['–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–∫—É–ø–∫—É (%)'] = (
                            (analytics_df['–ö—É–ø–∏–ª–∏'] / analytics_df['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'] * 100)
                            .round(2)
                        ).fillna(0)
                        
                        total_purchased = purchased_df['–ö—É–ø–∏–ª–∏'].sum()
                        st.success(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—É–ø–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {total_purchased} –ø–æ–∫—É–ø–æ–∫ —Å—Ä–µ–¥–∏ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤")
                        
                    else:
                        st.warning("‚ö†Ô∏è –ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç–æ–ª–±—Ü—ã
                        analytics_df['–ö—É–ø–∏–ª–∏'] = 0
                        analytics_df['–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–∫—É–ø–∫—É (%)'] = 0.0
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É "–ò—Ç–æ–≥–æ" –≤ –∫–æ–Ω–µ—Ü —Ç–∞–±–ª–∏—Ü—ã
                    # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞
                    total_rows = []
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º —Å—Ç—Ä–æ–∫
                    ordered_rows = []
                    
                    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –º–µ—Å—è—Ü—É
                    for month in sorted(analytics_df['–ú–µ—Å—è—Ü'].unique()):
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞
                        month_data = analytics_df[analytics_df['–ú–µ—Å—è—Ü'] == month].sort_values('–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞')
                        for _, row in month_data.iterrows():
                            ordered_rows.append(row.to_dict())
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥ –ø–æ –º–µ—Å—è—Ü—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                        month_summary = {
                            '–ú–µ—Å—è—Ü': month,
                            '–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞': '–ò–¢–û–ì–û –ü–û –ú–ï–°–Ø–¶–£',
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤': month_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'].sum(),
                            '–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã': month_data['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum(),
                            '–ö—É–ø–∏–ª–∏': month_data['–ö—É–ø–∏–ª–∏'].sum(),
                            '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é (%)': round(
                                (month_data['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum() / month_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'].sum() * 100), 2
                            ) if month_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'].sum() > 0 else 0,
                            '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–∫—É–ø–∫—É (%)': round(
                                (month_data['–ö—É–ø–∏–ª–∏'].sum() / month_data['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum() * 100), 2
                            ) if month_data['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum() > 0 else 0
                        }
                        ordered_rows.append(month_summary)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞
                    for source in sorted(analytics_df['–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞'].unique()):
                        source_data = analytics_df[analytics_df['–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞'] == source]
                        source_summary = {
                            '–ú–µ—Å—è—Ü': '–ò—Ç–æ–≥–æ',
                            '–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞': source,
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤': source_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'].sum(),
                            '–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã': source_data['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum(),
                            '–ö—É–ø–∏–ª–∏': source_data['–ö—É–ø–∏–ª–∏'].sum(),
                            '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é (%)': round(
                                (source_data['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum() / source_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'].sum() * 100), 2
                            ) if source_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'].sum() > 0 else 0,
                            '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–∫—É–ø–∫—É (%)': round(
                                (source_data['–ö—É–ø–∏–ª–∏'].sum() / source_data['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum() * 100), 2
                            ) if source_data['–ö—É–ø–∏–ª–∏'].sum() > 0 else 0
                        }
                        ordered_rows.append(source_summary)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                    overall_summary = {
                        '–ú–µ—Å—è—Ü': '–ò—Ç–æ–≥–æ',
                        '–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞': '–í–°–ï –ò–°–¢–û–ß–ù–ò–ö–ò',
                        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤': analytics_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'].sum(),
                        '–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã': analytics_df['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum(),
                        '–ö—É–ø–∏–ª–∏': analytics_df['–ö—É–ø–∏–ª–∏'].sum(),
                        '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é (%)': round(
                            (analytics_df['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum() / analytics_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'].sum() * 100), 2
                        ) if analytics_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'].sum() > 0 else 0,
                        '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–∫—É–ø–∫—É (%)': round(
                            (analytics_df['–ö—É–ø–∏–ª–∏'].sum() / analytics_df['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum() * 100), 2
                        ) if analytics_df['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum() > 0 else 0
                    }
                    ordered_rows.append(overall_summary)
                    
                    # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º
                    analytics_df_with_total = pd.DataFrame(ordered_rows)
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–∞–Ω–µ–ª–∏
                    total_leads = analytics_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'].sum()
                    total_prequalified = analytics_df['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'].sum()
                    total_purchased = analytics_df['–ö—É–ø–∏–ª–∏'].sum()
                    
                    # –°—Ä–µ–¥–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
                    avg_lead_to_sql = round((total_prequalified / total_leads * 100), 2) if total_leads > 0 else 0
                    avg_sql_to_sale = round((total_purchased / total_prequalified * 100), 2) if total_prequalified > 0 else 0
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–∞–Ω–µ–ª—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
                    st.subheader("üìä –ö–õ–Æ–ß–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò")
                    
                    # –°–æ–∑–¥–∞–µ–º 5 –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –º–µ—Ç—Ä–∏–∫
                    col1, col2, col3, col4, col5 = st.columns(5)
                    
                    with col1:
                        st.metric(
                            label="–õ–∏–¥—ã",
                            value=f"{total_leads:,}".replace(",", " "),
                            help="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤"
                        )
                    
                    with col2:
                        st.metric(
                            label="SQL",
                            value=f"{total_prequalified:,}".replace(",", " "),
                            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤"
                        )
                    
                    with col3:
                        st.metric(
                            label="–ö—É–ø–∏–ª–∏",
                            value=f"{total_purchased:,}".replace(",", " "),
                            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂"
                        )
                    
                    with col4:
                        st.metric(
                            label="–ö–æ–Ω–≤–µ—Ä—Å–∏—è –õ–∏–¥ ‚Üí SQL",
                            value=f"{avg_lead_to_sql}%",
                            help="–°—Ä–µ–¥–Ω—è—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –ª–∏–¥–æ–≤ –≤ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ"
                        )
                    
                    with col5:
                        st.metric(
                            label="–ö–æ–Ω–≤–µ—Ä—Å–∏—è SQL ‚Üí –ü—Ä–æ–¥–∞–∂–∞",
                            value=f"{avg_sql_to_sale}%",
                            help="–°—Ä–µ–¥–Ω—è—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–¥–∞–∂–∏"
                        )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                    st.markdown("---")
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Period –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    analytics_df_with_total['–ú–µ—Å—è—Ü'] = analytics_df_with_total['–ú–µ—Å—è—Ü'].astype(str)
                    
                    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫ –¥–ª—è –º–µ—Å—è—Ü–µ–≤
                    # –ú–µ—Å—è—Ü –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
                    month_display = analytics_df_with_total['–ú–µ—Å—è—Ü'].copy()
                    current_month = None
                    
                    for idx in range(len(analytics_df_with_total)):
                        month = analytics_df_with_total.iloc[idx]['–ú–µ—Å—è—Ü']
                        source = analytics_df_with_total.iloc[idx]['–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞']
                        
                        # –î–ª—è —Å—Ç—Ä–æ–∫ "–ò–¢–û–ì–û –ü–û –ú–ï–°–Ø–¶–£" –æ—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—è—Ü –∫–∞–∫ –µ—Å—Ç—å
                        if source == '–ò–¢–û–ì–û –ü–û –ú–ï–°–Ø–¶–£':
                            month_display.iloc[idx] = month
                            current_month = month
                        elif month != current_month:
                            current_month = month
                            # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—è—Ü –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
                        else:
                            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ —Ç–æ–≥–æ –∂–µ –º–µ—Å—è—Ü–∞ –¥–µ–ª–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
                            month_display.iloc[idx] = ''
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å—Ç–æ–ª–±—Ü–æ–º –º–µ—Å—è—Ü–∞
                    display_df = analytics_df_with_total.copy()
                    display_df['–ú–µ—Å—è—Ü'] = month_display
                    
                    st.success(f"‚úÖ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞! –†–∞–∑–º–µ—Ä: {analytics_df.shape[0]} —Å—Ç—Ä–æ–∫, {analytics_df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
                    st.info(f"üìä –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –≤—Å–µ—Ö {len(leads_analysis_clean)} –ª–∏–¥–∞—Ö –∏–∑ leads2025")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É —Å –∏—Ç–æ–≥–∞–º–∏
                    st.subheader("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ª–∏–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º:")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–Ω—É —Ç–∞–±–ª–∏—Ü—É —Å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π –ø–æ –¥–∞—Ç–µ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞
                    st.dataframe(display_df, use_container_width=True)
                    
                    # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Ç—Ä–∞—Ñ–∏–∫–∞ (—Ç–µ–ø–µ—Ä—å –≤—Å—Ç—Ä–æ–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É)
                    st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫ –ª–∏–¥–æ–≤ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Ç—Ä–∞—Ñ–∏–∫–∞:")
                    
                    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
                    fig_traffic = go.Figure()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
                    for source in analytics_df['–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞'].unique():
                        source_data = analytics_df[analytics_df['–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞'] == source]
                        source_data['–ú–µ—Å—è—Ü'] = source_data['–ú–µ—Å—è—Ü'].astype(str)
                        
                        fig_traffic.add_trace(
                            go.Scatter(
                                x=source_data['–ú–µ—Å—è—Ü'],
                                y=source_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'],
                                mode='lines+markers',
                                name=source,
                                line=dict(width=3)
                            )
                        )
                    
                    fig_traffic.update_layout(
                        height=500,
                        title_text="–î–∏–Ω–∞–º–∏–∫–∞ –ª–∏–¥–æ–≤ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Ç—Ä–∞—Ñ–∏–∫–∞",
                        xaxis_title="–ú–µ—Å—è—Ü",
                        yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤",
                        showlegend=True
                    )
                    
                    st.plotly_chart(fig_traffic, use_container_width=True)
                    
                    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                    st.subheader("üìä –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –ª–∏–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º:")
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Period –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    analytics_df_display = analytics_df.reset_index()
                    analytics_df_display['–ú–µ—Å—è—Ü'] = analytics_df_display['–ú–µ—Å—è—Ü'].astype(str)
                    
                    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –¥–≤—É–º—è –ª–∏–Ω–∏—è–º–∏
                    import plotly.express as px
                    import plotly.graph_objects as go
                    from plotly.subplots import make_subplots
                    
                    fig = make_subplots(
                        rows=2, cols=1,
                        subplot_titles=('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é (%)'),
                        vertical_spacing=0.1
                    )
                    
                    # –ü–µ—Ä–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤
                    fig.add_trace(
                        go.Scatter(
                            x=analytics_df_display['–ú–µ—Å—è—Ü'],
                            y=analytics_df_display['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤'],
                            mode='lines+markers',
                            name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤',
                            line=dict(color='blue', width=3)
                        ),
                        row=1, col=1
                    )
                    
                    fig.add_trace(
                        go.Scatter(
                            x=analytics_df_display['–ú–µ—Å—è—Ü'],
                            y=analytics_df_display['–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã'],
                            mode='lines+markers',
                            name='–ü—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã',
                            line=dict(color='green', width=3)
                        ),
                        row=1, col=1
                    )
                    
                    # –í—Ç–æ—Ä–æ–π –≥—Ä–∞—Ñ–∏–∫ - –∫–æ–Ω–≤–µ—Ä—Å–∏—è
                    fig.add_trace(
                        go.Scatter(
                            x=analytics_df_display['–ú–µ—Å—è—Ü'],
                            y=analytics_df_display['–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø—Ä–µ–¥–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é (%)'],
                            mode='lines+markers',
                            name='–ö–æ–Ω–≤–µ—Ä—Å–∏—è (%)',
                            line=dict(color='red', width=3)
                        ),
                        row=2, col=1
                    )
                    
                    fig.update_layout(
                        height=600,
                        title_text="–î–∏–Ω–∞–º–∏–∫–∞ –ª–∏–¥–æ–≤ –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º",
                        showlegend=True
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                    
                else:
                    st.error("‚ùå –°—Ç–æ–ª–±–µ—Ü '–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")
                    
            else:
                st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                
        else:
            st.error("‚ùå –°—Ç–æ–ª–±–µ—Ü '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")
        analytics_df = None
        
else:
    st.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.")
